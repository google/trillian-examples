// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// map constructs a verifiable map from the modules in Go SumDB.
package main

import (
	"context"
	"crypto"
	"flag"
	"fmt"
	"os"
	"reflect"

	"github.com/apache/beam/sdks/go/pkg/beam"
	"github.com/apache/beam/sdks/go/pkg/beam/io/databaseio"
	"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local"
	"github.com/apache/beam/sdks/go/pkg/beam/x/beamx"

	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"

	"github.com/google/trillian/experimental/batchmap"
	"github.com/google/trillian/experimental/batchmap/tilepb"
	"github.com/google/trillian/merkle/coniks"

	_ "github.com/mattn/go-sqlite3"
)

const hash = crypto.SHA512_256

var (
	sumDB        = flag.String("sum_db", "", "The path of the SQLite file generated by sumdbaudit, e.g. ~/sum.db.")
	output       = flag.String("output", "", "Output directory in which the tiles will be written.")
	treeID       = flag.Int64("tree_id", 12345, "The ID of the tree. Used as a salt in hashing.")
	prefixStrata = flag.Int("prefix_strata", 2, "The number of strata of 8-bit strata before the final strata.")
	count        = flag.Int("count", -1, "The total number of entries starting from the beginning of the SumDB to use, or -1 to use all")
)

func init() {
	beam.RegisterType(reflect.TypeOf((*mapEntryFn)(nil)).Elem())
	beam.RegisterType(reflect.TypeOf((*writeTileFn)(nil)).Elem())
}

// Metadata is the audit.Metadata object with the addition of an ID field.
// It must map to the scheme of the leafMetadata table.
type Metadata struct {
	ID       int64
	Module   string
	Version  string
	RepoHash string
	ModHash  string
}

func main() {
	flag.Parse()
	beam.Init()

	if len(*sumDB) == 0 {
		glog.Exitf("No sum_db provided")
	}

	if len(*output) == 0 {
		glog.Exitf("No output provided")
	}

	// Create the directory if it doesn't exist
	if _, err := os.Stat(*output); os.IsNotExist(err) {
		if err = os.Mkdir(*output, 0700); err != nil {
			glog.Exitf("couldn't find or create directory %q, %q", *output, err)
		}
	}

	p, s := beam.NewPipelineWithRoot()

	records := sourceFromFlags(s.Scope("source"))
	entries := beam.ParDo(s.Scope("mapentries"), &mapEntryFn{*treeID}, records)
	allTiles, err := batchmap.Create(s, entries, *treeID, hash, *prefixStrata)

	if err != nil {
		glog.Exitf("Failed to create pipeline: %q", err)
	}

	// Write this collection of tiles to the output directory.
	beam.ParDo0(s.Scope("output"), &writeTileFn{*output}, allTiles)

	// All of the above constructs the pipeline but doesn't run it. Now we run it.
	if err := beamx.Run(context.Background(), p); err != nil {
		glog.Exitf("Failed to execute job: %q", err)
	}
}

func sourceFromFlags(s beam.Scope) beam.PCollection {
	if *count < 0 {
		return databaseio.Read(s, "sqlite3", *sumDB, "leafMetadata", reflect.TypeOf(Metadata{}))
	}
	return databaseio.Query(s, "sqlite3", *sumDB, fmt.Sprintf("SELECT * FROM leafMetadata WHERE id < %d", *count), reflect.TypeOf(Metadata{}))
}

type mapEntryFn struct {
	TreeID int64
}

func (fn *mapEntryFn) ProcessElement(m Metadata, emit func(*tilepb.Entry)) {
	h := hash.New()
	h.Write([]byte(fmt.Sprintf("%s %s/go.mod", m.Module, m.Version)))
	modKey := h.Sum(nil)

	emit(&tilepb.Entry{
		HashKey:   modKey,
		HashValue: coniks.Default.HashLeaf(fn.TreeID, modKey, []byte(m.ModHash)),
	})

	h = hash.New()
	h.Write([]byte(fmt.Sprintf("%s %s", m.Module, m.Version)))
	repoKey := h.Sum(nil)

	emit(&tilepb.Entry{
		HashKey:   repoKey,
		HashValue: coniks.Default.HashLeaf(fn.TreeID, repoKey, []byte(m.RepoHash)),
	})
}

// writeTileFn serializes the tile into the given directory, using the tile
// path to determine the file name.
// This is reasonable for a demo with a small number of tiles, but with large
// maps with multiple revisions, it is conceivable that one could run out of
// inodes on the filesystem, and thus using a database locally or storing the
// tile data in cloud storage are more likely to scale.
type writeTileFn struct {
	Directory string
}

func (fn *writeTileFn) ProcessElement(ctx context.Context, t *tilepb.Tile) error {
	fs := local.New(ctx)
	w, err := fs.OpenWrite(ctx, fmt.Sprintf("%s/path_%x", fn.Directory, t.Path))
	if err != nil {
		return err
	}
	defer w.Close()

	bs, err := proto.Marshal(t)
	if err != nil {
		return err
	}
	_, err = w.Write(bs)
	return err
}
