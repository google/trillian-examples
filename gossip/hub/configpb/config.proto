// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package configpb;

import "github.com/google/trillian/crypto/keyspb/keyspb.proto";
import "github.com/google/trillian/crypto/sigpb/sigpb.proto";
import "google/protobuf/any.proto";

// HubMultiConfig wraps up a collection of HubConfig messages with a
// corresponding map of backend specifications so that the configuration
// can be parsed as a single proto.
message HubMultiConfig {
  // The set of hubs that will use the backends below. All the protos in this
  // HubConfigSet must set a valid hub_backend_name for the config to be usable.
  repeated HubConfig hub_config = 1;

  // The collection of backends that this configuration will use to send requests to.
  // The key for the map is the backend name (referenced by HubConfig.backend_name)
  // and the corresponding value defines the RPC endpoint that clients should use to
  // send requests to this hub backend. These values should be in the same format as
  // rpcBackendFlag in the hub_server main and must not be an empty string.
  map<string, string> hub_backends = 2;
}

// HubConfigSet holds a set of hub configurations as a single message to allow
// configuration of a hub using a default backend.
message HubConfigSet {
  repeated HubConfig config = 1;
}

// HubConfig describes the configuration options for a hub instance.
message HubConfig {
  int64 log_id = 1;
  string prefix = 2;
  repeated TrackedSource source = 3;
  google.protobuf.Any private_key = 4;
  // The public key is included for the convenience of test tools (and obviously
  // should match the private key above); it is not used by the hub.
  keyspb.PublicKey public_key = 5;
  // backend_name (if set) indicates which backend serves this hub.  When enclosed in
  // a HubMultiConfig the name must be one of the keys for the hub_backends map.
  string backend_name = 6;
}

// TrackedSource describes a source that this gossip hub will accept signed blobs from.
message TrackedSource {
  string name = 1;
  string id = 2;
  keyspb.PublicKey public_key = 3;
  sigpb.DigitallySigned.HashAlgorithm hash_algorithm = 4;
  // kind indicates
  enum Kind {
    UNKNOWN = 0;
    RFC6962STH = 1;
  }
  Kind kind = 5;
}
