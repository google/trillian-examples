// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package configpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	HubMultiConfig
	HubConfigSet
	HubConfig
	TrackedSource
*/
package configpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keyspb "github.com/google/trillian/crypto/keyspb"
import sigpb "github.com/google/trillian/crypto/sigpb"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// kind indicates
type TrackedSource_Kind int32

const (
	TrackedSource_UNKNOWN    TrackedSource_Kind = 0
	TrackedSource_RFC6962STH TrackedSource_Kind = 1
)

var TrackedSource_Kind_name = map[int32]string{
	0: "UNKNOWN",
	1: "RFC6962STH",
}
var TrackedSource_Kind_value = map[string]int32{
	"UNKNOWN":    0,
	"RFC6962STH": 1,
}

func (x TrackedSource_Kind) String() string {
	return proto.EnumName(TrackedSource_Kind_name, int32(x))
}
func (TrackedSource_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// HubMultiConfig wraps up a collection of HubConfig messages with a
// corresponding map of backend specifications so that the configuration
// can be parsed as a single proto.
type HubMultiConfig struct {
	// The set of hubs that will use the backends below. All the protos in this
	// HubConfigSet must set a valid hub_backend_name for the config to be usable.
	HubConfig []*HubConfig `protobuf:"bytes,1,rep,name=hub_config,json=hubConfig" json:"hub_config,omitempty"`
	// The collection of backends that this configuration will use to send requests to.
	// The key for the map is the backend name (referenced by HubConfig.backend_name)
	// and the corresponding value defines the RPC endpoint that clients should use to
	// send requests to this hub backend. These values should be in the same format as
	// rpcBackendFlag in the hub_server main and must not be an empty string.
	HubBackends map[string]string `protobuf:"bytes,2,rep,name=hub_backends,json=hubBackends" json:"hub_backends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HubMultiConfig) Reset()                    { *m = HubMultiConfig{} }
func (m *HubMultiConfig) String() string            { return proto.CompactTextString(m) }
func (*HubMultiConfig) ProtoMessage()               {}
func (*HubMultiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HubMultiConfig) GetHubConfig() []*HubConfig {
	if m != nil {
		return m.HubConfig
	}
	return nil
}

func (m *HubMultiConfig) GetHubBackends() map[string]string {
	if m != nil {
		return m.HubBackends
	}
	return nil
}

// HubConfigSet holds a set of hub configurations as a single message to allow
// configuration of a hub using a default backend.
type HubConfigSet struct {
	Config []*HubConfig `protobuf:"bytes,1,rep,name=config" json:"config,omitempty"`
}

func (m *HubConfigSet) Reset()                    { *m = HubConfigSet{} }
func (m *HubConfigSet) String() string            { return proto.CompactTextString(m) }
func (*HubConfigSet) ProtoMessage()               {}
func (*HubConfigSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HubConfigSet) GetConfig() []*HubConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// HubConfig describes the configuration options for a hub instance.
type HubConfig struct {
	LogId      int64                `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	Prefix     string               `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	Source     []*TrackedSource     `protobuf:"bytes,3,rep,name=source" json:"source,omitempty"`
	PrivateKey *google_protobuf.Any `protobuf:"bytes,4,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// The public key is included for the convenience of test tools (and obviously
	// should match the private key above); it is not used by the hub.
	PublicKey *keyspb.PublicKey `protobuf:"bytes,5,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// backend_name (if set) indicates which backend serves this hub.  When enclosed in
	// a HubMultiConfig the name must be one of the keys for the hub_backends map.
	BackendName string `protobuf:"bytes,6,opt,name=backend_name,json=backendName" json:"backend_name,omitempty"`
}

func (m *HubConfig) Reset()                    { *m = HubConfig{} }
func (m *HubConfig) String() string            { return proto.CompactTextString(m) }
func (*HubConfig) ProtoMessage()               {}
func (*HubConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HubConfig) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *HubConfig) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *HubConfig) GetSource() []*TrackedSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *HubConfig) GetPrivateKey() *google_protobuf.Any {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *HubConfig) GetPublicKey() *keyspb.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *HubConfig) GetBackendName() string {
	if m != nil {
		return m.BackendName
	}
	return ""
}

// TrackedSource describes a source that this gossip hub will accept signed blobs from.
type TrackedSource struct {
	Name          string                              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id            string                              `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	PublicKey     *keyspb.PublicKey                   `protobuf:"bytes,3,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	HashAlgorithm sigpb.DigitallySigned_HashAlgorithm `protobuf:"varint,4,opt,name=hash_algorithm,json=hashAlgorithm,enum=sigpb.DigitallySigned_HashAlgorithm" json:"hash_algorithm,omitempty"`
	Kind          TrackedSource_Kind                  `protobuf:"varint,5,opt,name=kind,enum=configpb.TrackedSource_Kind" json:"kind,omitempty"`
}

func (m *TrackedSource) Reset()                    { *m = TrackedSource{} }
func (m *TrackedSource) String() string            { return proto.CompactTextString(m) }
func (*TrackedSource) ProtoMessage()               {}
func (*TrackedSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TrackedSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackedSource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackedSource) GetPublicKey() *keyspb.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *TrackedSource) GetHashAlgorithm() sigpb.DigitallySigned_HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return sigpb.DigitallySigned_NONE
}

func (m *TrackedSource) GetKind() TrackedSource_Kind {
	if m != nil {
		return m.Kind
	}
	return TrackedSource_UNKNOWN
}

func init() {
	proto.RegisterType((*HubMultiConfig)(nil), "configpb.HubMultiConfig")
	proto.RegisterType((*HubConfigSet)(nil), "configpb.HubConfigSet")
	proto.RegisterType((*HubConfig)(nil), "configpb.HubConfig")
	proto.RegisterType((*TrackedSource)(nil), "configpb.TrackedSource")
	proto.RegisterEnum("configpb.TrackedSource_Kind", TrackedSource_Kind_name, TrackedSource_Kind_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0x69, 0x17, 0xe8, 0x4d, 0x17, 0x15, 0x33, 0x20, 0x54, 0x3c, 0x94, 0xc2, 0x43, 0x11,
	0x92, 0x33, 0x65, 0xda, 0xc4, 0x87, 0x84, 0x34, 0x06, 0xa8, 0xa8, 0x50, 0x50, 0x3a, 0xc4, 0x63,
	0xe5, 0x24, 0x6e, 0x62, 0xd5, 0x8d, 0xa3, 0x7c, 0x4c, 0xe4, 0x27, 0xf0, 0xf7, 0xf8, 0x33, 0xbc,
	0xa2, 0xd8, 0xee, 0xbe, 0x24, 0x34, 0x5e, 0x92, 0x7b, 0xae, 0xcf, 0xf1, 0x3d, 0xf7, 0x5e, 0x43,
	0x3f, 0x12, 0xd9, 0x8a, 0x25, 0x38, 0x2f, 0x44, 0x25, 0xd0, 0x1d, 0x85, 0xf2, 0x70, 0x78, 0x98,
	0xb0, 0x2a, 0xad, 0x43, 0x1c, 0x89, 0x8d, 0x97, 0x08, 0x91, 0x70, 0xea, 0x55, 0x05, 0xe3, 0x9c,
	0x91, 0xcc, 0x8b, 0x8a, 0x26, 0xaf, 0x84, 0xb7, 0xa6, 0x4d, 0x99, 0x87, 0xfa, 0xa7, 0x2e, 0x18,
	0x1e, 0xdc, 0x2c, 0x2b, 0xdb, 0xfb, 0xd5, 0x57, 0x8b, 0x1e, 0x69, 0xa6, 0x44, 0x61, 0xbd, 0xf2,
	0x48, 0xd6, 0xa8, 0xa3, 0xf1, 0x6f, 0x03, 0x9c, 0x69, 0x1d, 0x7e, 0xa9, 0x79, 0xc5, 0x4e, 0xa4,
	0x37, 0xe4, 0x03, 0xa4, 0x75, 0xb8, 0x54, 0x4e, 0x5d, 0x63, 0xd4, 0x99, 0xd8, 0xfe, 0x3d, 0xbc,
	0x35, 0x8e, 0xa7, 0x75, 0xa8, 0x88, 0x41, 0x2f, 0xdd, 0x86, 0xe8, 0x33, 0xf4, 0x5b, 0x4d, 0x48,
	0xa2, 0x35, 0xcd, 0xe2, 0xd2, 0x35, 0xa5, 0xea, 0xf9, 0x15, 0xd5, 0xa5, 0x1a, 0x2d, 0x7c, 0xa7,
	0xb9, 0x1f, 0xb2, 0xaa, 0x68, 0x02, 0x3b, 0xbd, 0xc8, 0x0c, 0xdf, 0xc2, 0xe0, 0x3a, 0x01, 0x0d,
	0xa0, 0xb3, 0xa6, 0x8d, 0x6b, 0x8c, 0x8c, 0x49, 0x2f, 0x68, 0x43, 0xb4, 0x07, 0x3b, 0x67, 0x84,
	0xd7, 0xd4, 0x35, 0x65, 0x4e, 0x81, 0xd7, 0xe6, 0x4b, 0x63, 0xfc, 0x06, 0xfa, 0xe7, 0x2e, 0x17,
	0xb4, 0x42, 0x2f, 0xc0, 0xba, 0xb9, 0x1b, 0x4d, 0x19, 0xff, 0x31, 0xa0, 0x77, 0x9e, 0x45, 0xf7,
	0xc1, 0xe2, 0x22, 0x59, 0xb2, 0x58, 0x56, 0xee, 0x04, 0x3b, 0x5c, 0x24, 0x9f, 0x62, 0xf4, 0x00,
	0xac, 0xbc, 0xa0, 0x2b, 0xf6, 0x53, 0x17, 0xd7, 0x08, 0x79, 0x60, 0x95, 0xa2, 0x2e, 0x22, 0xea,
	0x76, 0x64, 0xa5, 0x87, 0x17, 0x95, 0x4e, 0x8b, 0xb6, 0x9f, 0x78, 0x21, 0x8f, 0x03, 0x4d, 0x43,
	0x87, 0x60, 0xe7, 0x05, 0x3b, 0x23, 0x15, 0x5d, 0xb6, 0xed, 0x75, 0x47, 0xc6, 0xc4, 0xf6, 0xf7,
	0xb0, 0x5a, 0x18, 0xde, 0x2e, 0x0c, 0x1f, 0x67, 0x4d, 0x00, 0x9a, 0x38, 0xa3, 0x0d, 0xda, 0x07,
	0xc8, 0xeb, 0x90, 0xb3, 0x48, 0xaa, 0x76, 0xa4, 0xea, 0x2e, 0xd6, 0x2f, 0xe5, 0x9b, 0x3c, 0x99,
	0xd1, 0x26, 0xe8, 0xe5, 0xdb, 0x10, 0x3d, 0x81, 0xbe, 0xde, 0xce, 0x32, 0x23, 0x1b, 0xea, 0x5a,
	0xd2, 0xb7, 0xad, 0x73, 0x73, 0xb2, 0xa1, 0xe3, 0x5f, 0x26, 0xec, 0x5e, 0x71, 0x89, 0x10, 0x74,
	0x25, 0x59, 0x4d, 0x5d, 0xc6, 0xc8, 0x01, 0x93, 0xc5, 0xba, 0x6d, 0x93, 0xc5, 0xd7, 0xac, 0x74,
	0xfe, 0xc3, 0xca, 0x0c, 0x9c, 0x94, 0x94, 0xe9, 0x92, 0xf0, 0x44, 0x14, 0xac, 0x4a, 0x37, 0xb2,
	0x6d, 0xc7, 0x7f, 0x86, 0xd5, 0xa3, 0x7d, 0xcf, 0x12, 0x56, 0x11, 0xce, 0x9b, 0x05, 0x4b, 0x32,
	0x1a, 0xe3, 0x29, 0x29, 0xd3, 0xe3, 0x2d, 0x37, 0xd8, 0x4d, 0x2f, 0x43, 0xb4, 0x0f, 0xdd, 0x35,
	0xcb, 0x62, 0x39, 0x03, 0xc7, 0x7f, 0xfc, 0x8f, 0x79, 0xe3, 0x19, 0xcb, 0xe2, 0x40, 0x32, 0xc7,
	0x4f, 0xa1, 0xdb, 0x22, 0x64, 0xc3, 0xed, 0xef, 0xf3, 0xd9, 0xfc, 0xeb, 0x8f, 0xf9, 0xe0, 0x16,
	0x72, 0x00, 0x82, 0x8f, 0x27, 0x47, 0xaf, 0x8e, 0xfc, 0xc5, 0xe9, 0x74, 0x60, 0x84, 0x96, 0x1c,
	0xfd, 0xc1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x16, 0xab, 0x60, 0xbf, 0x03, 0x00, 0x00,
}
